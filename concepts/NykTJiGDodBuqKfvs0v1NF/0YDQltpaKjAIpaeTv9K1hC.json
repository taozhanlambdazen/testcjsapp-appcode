{
  "uri" : "local://0YDQltpaKjAIpaeTv9K1hC/",
  "name" : "test.js",
  "category" : "js",
  "parent" : "local://NykTJiGDodBuqKfvs0v1NF/",
  "flags" : "U",
  "lvars" : [ ],
  "vars" : [ {
    "name" : "_javascriptResource_js",
    "expr" : {
      "str" : "var loc = $cjs.location();\n        var mode = loc.param(\"mode\");\n        var resetToken = loc.param(\"resetToken\");\n        var targetUrl = loc.param(\"target\");\n        var resetPassUser = loc.param(\"username\");\n        \n        var validateUser = function(user) {\n            var re = /^[a-z0-9]{4,30}$/;\n            return re.test(user);\n        };\n\n        var validateEmail = function(email) {\n            var re = /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n            return re.test(email);\n        };\n\n        var validatePasswd = function(passwd) {\n            return !passwd || (passwd.length >= 6);\n        };\n    \n        function UserAuthVM(appOwner, appUserConcUri, appUserDashboardUri, appUserSettingsUri, enableSignup, formConfigure, adminVM) {\n            var self = this;\n            \n            this.formConfigure = formConfigure;\n            \n            this.username = ko.observable();\n            this.email = ko.observable();\n            this.password = ko.observable();\n            this.showError = ko.observable(false);\n            this.errorMsg = ko.observable();\n            this.remember = ko.observable();\n            this.passwordConfirm = ko.observable();\n            this.enableSignup = ko.observable(enableSignup);\n            this.role = ko.observable(\"ACCESS\");\n            \n            this.displayName = ko.observable();\n            this.showDisplayName = ko.computed(function(){\n                return this.formConfigure[\"displayName\"] && this.formConfigure[\"displayName\"].enable;\n            }, this)\n            this.displayNameRequired = ko.computed(function(){\n                return this.formConfigure[\"displayName\"] && this.formConfigure[\"displayName\"].required;\n            }, this)\n            \n            this.responseDialog = new DialogVM();\n            this.responseMsg = ko.observable(\"\");\n            \n            this.mode = ko.observable(mode);\n            this.signupMode = ko.computed(function(){\n                return this.mode() && this.mode() == \"signup\";\n            }, this)\n            this.loginMode = ko.computed(function(){\n                return !this.mode() || this.mode() == \"login\" || this.mode() == \"notauthorized\" || this.mode() == \"logout\";\n            }, this)\n            this.resetPassMode = ko.computed(function(){\n                return this.mode() && this.mode() == \"resetpass\";\n            }, this)\n            this.forgetPassMode = ko.computed(function(){\n                return this.mode() && this.mode() == \"forgetpass\";\n            }, this)\n            \n            this.showSignup = function(){\n                self.mode(\"signup\");\n            }\n            \n            this.showSignin = function(){\n                self.mode(\"login\");\n            }\n            \n            this.showForgetPass = function(){\n                self.mode(\"forgetpass\");\n            }\n            \n            if (this.mode() && this.mode() == \"notauthorized\"){\n                self.showError(true);\n                this.errorMsg(\"You are not authorized to access the page, please login\");\n            }else{\n                self.showError(false);\n            }\n            \n            this.validate = function(){\n                if (self.signupMode()){\n                    if (!self.username() || !validateUser(self.username())){\n                        self.showError(true);\n                        self.errorMsg(\"Username is empty or invalid. Only lowercase alphanumeric characters are allowed. The minimum number of characters is 4 and the maximum number of characters is 30\");\n                        return false;\n                    }\n                    \n                    if (!self.email() || !validateEmail(self.email())){\n                        self.showError(true);\n                        self.errorMsg(\"Email address is empty or invalid\");\n                        return false;\n                    }\n                    \n                    if (!self.password()  || !validatePasswd(self.password())){\n                        self.showError(true);\n                        self.errorMsg(\"Password is empty or less than 6 in length\");\n                        return false;\n                    }\n                    \n                    if (self.displayNameRequired() && !self.displayName()){\n                        self.showError(true);\n                        self.errorMsg(\"Display Name is required\");\n                        return false;\n                    }\n                }else if (self.loginMode()){\n                    if (!self.username()){\n                        self.showError(true);\n                        self.errorMsg(\"username is empty\");\n                        return false;\n                    }\n                    \n                    if (!self.password()){\n                        self.showError(true);\n                        self.errorMsg(\"password is empty\");\n                        return false;\n                    }\n                }else if (self.resetPassMode()){\n                    if (!self.password()  || !validatePasswd(self.password())){\n                        self.showError(true);\n                        self.errorMsg(\"Password is empty or less than 6 in length\");\n                        return false;\n                    }\n                    \n                    if (!self.passwordConfirm()){\n                        self.showError(true);\n                        self.errorMsg(\"password confirmation is empty\");\n                        return false;\n                    }\n                    \n                    if (self.password() != self.passwordConfirm()){\n                        self.showError(true);\n                        self.errorMsg(\"password mismatch!\");\n                        return false;\n                    }\n                }else if (self.forgetPassMode()){\n                    if (!self.email() || !validateEmail(self.email())){\n                        self.showError(true);\n                        self.errorMsg(\"Email address is empty or invalid\");\n                        return false;\n                    }\n                }else{\n                    throw error(\"mode not supported:\"+self.mode());\n                }\n                \n                return true;\n            }\n            \n            this.postSignup = function(data){\n                        if (!adminVM){\n                            if (self.role() == \"ADMIN\"){\n                                $cjs.updateUserRole(appOwner+\"_\"+self.username(), self.role(), data.appUserConcUri,\n                                    function(){\n                                        adminVM.newUserDialog.close();\n                                        adminVM.refresh();\n                                    },\n                                    function(jqXHR, textStatus, errorThrown){\n    \t        \t                    console.log(\"update user role failed, status:\" + textStatus + \", error:\" + errorThrown + \", server response:\" + ((jqXHR.responseText)?jqXHR.responseText:\"\"));\n    \t                            }\n    \t                        );\n                            }else{\n                                adminVM.newUserDialog.close();\n                                adminVM.refresh();\n                            }\n                        }else{\n                \t        if (data.target) {\n                                window.location.replace(data.target);\n                            }else {\n                                // Root page will redirect to the user's dashboard\n                    \t        $cjs.redirect(\"/view\"+data.dashboardUri, \"_self\", \"ANY\");\n                            }\n                        }\n            }\n            \n            this.signup = function(){\n                if (!self.validate()){\n                    return;\n                }else{\n                    self.showError(false);\n                }\n                $.ajax({\n                    type: \"POST\",\n                    url: \"/auth/signup\",\n                    data: {\"username\": self.username(), \"passwd\": self.password(), \"email\": self.email(), \"target\": targetUrl, \"appOwner\": appOwner, \"appUserConcUri\": appUserConcUri, \"appUserDashboardConcUri\": appUserDashboardUri, \"appUserSettingsUri\": appUserSettingsUri, \"noToken\": (adminVM)?\"true\":\"false\", \"newUserEmailTemplate\": (adminVM)?\"INVITE\":\"WELCOME\"},\n                    dataType: \"json\"\n                }).done(function(data){\n                    if (data.hasOwnProperty(\"errorCode\")) {\n                        if (data.errorCode == \"USER_ALREADY_EXISTS\") {\n                            self.showError(true);\n                            self.errorMsg(\"This user account has been taken by another user\");\n                        }else if (data.errorCode == \"EMAIL_ALREADY_EXISTS\") {\n                            self.showError(true);\n                            self.errorMsg(\"This email has been taken by another user\");\n                        }\n                    } else {\n                        self.showError(false);\n                        \n                        if (self.displayName()){\n                            if (!adminVM){\n                                $cjs.setCJSTokenHash(data.cjstokenHash);\n                            }\n                            $cjs(data.userConcept.uri).as(\"/common/admin/4hkGSPoI63Be4qjV2e40H3/\").execute(\"updateUserConc\", [{ \"displayName\" :self.displayName()}],\n                                function(){\n                                    self.postSignup(data);\n                                },\n                                function(jqXHR, textStatus, errorThrown){\n    \t        \t                console.log(\"update user properties failed, status:\" + textStatus + \", error:\" + errorThrown + \", server response:\" + ((jqXHR.responseText)?jqXHR.responseText:\"\"));\n    \t        \t                self.postSignup(data);\n    \t                        }\n                            );\n                        }else{\n                            self.postSignup(data);\n                        }\n                        \n                    }\n                }).fail(function(jqXHR, textStatus) {\n                    console.log(\"signup failed:\" + JSON.stringify(jqXHR));\n                });\n            }\n            \n            this.login = function(){\n                if (!self.validate()){\n                    return;\n                }else{\n                    self.showError(false);\n                }\n                $.ajax({\n                    type: \"POST\",\n                    url: \"/auth/login\",\n                    data: {\"username\": self.username(), \"passwd\": self.password(), \"target\": targetUrl, \"remember-me\": (self.remember() ? \"yes\" : \"no\"), \"appOwner\": appOwner},\n                    dataType: \"json\"\n                }).done(function(data){\n                    if (data.hasOwnProperty(\"errorCode\")){\n                        if (data.errorCode == \"INVALID_GRANT\"){\n                            self.showError(true);\n                            self.errorMsg(\"The user password is not correct, please double check.\");\n                        } else if (data.errorCode == \"USER_NOT_EXISTS\") {\n                            self.showError(true);\n                            self.errorMsg(\"The username doesn't exsit, please double check.\");\n                        }\n                    } else {\n                        self.showError(false);\n                        if (data.target) {\n                            window.location.replace(data.target);\n                        } else {\n                            // Root page will redirect to the user's dashboard\n                    \t    $cjs.redirect(\"/view\"+data.dashboardUri, \"_self\", \"ANY\");\n                        }\n                    }\n                }).fail(function(jqXHR, textStatus){\n                    console.log(\"Login failed. \" + JSON.stringify(jqXHR) + \". textStatus \" + textStatus);\n                });\n            }\n            \n            this.resetPass = function(){\n                if (!self.validate()){\n                    return;\n                }else{\n                    self.showError(false);\n                }\n                $.ajax({\n                    type: \"POST\",\n                    url: \"/auth/resetPassword\",\n                    data: {\"username\": resetPassUser, \"passwd\": self.password(), \"resetToken\": resetToken, \"appOwner\": appOwner},\n                    dataType: \"json\"\n                }).done(function(data){\n                    if (data.hasOwnProperty(\"errorCode\")) {\n                        self.showError(true);\n                        self.errorMsg(\"Unable to reset password. Please contact the administrator. \");\n                        console.log(\"Unable to reset password: \" + JSON.stringify(data));\n                    } else {\n                        if (data.target) {\n                            window.location.replace(data.target);\n                        } else {\n                            // Root page will redirect to the user's page\n                            $cjs.redirect(\"/view\"+data.dashboardUri, \"_self\", \"ANY\");\n                        }\n                    }\n                }).fail(function(jqXHR, textStatus) {\n                    console.log(\"reset password failed:\" + JSON.stringify(jqXHR));\n                });\n            }\n            \n            this.newMethod = function(){\n                return \"new\";\n            }\n            \n            this.forgetPass = function(){\n                if (!self.validate()){\n                    return;\n                }else{\n                    self.showError(false);\n                }\n                \n                $.ajax({\n                    type: \"POST\",\n                    url: \"/auth/forgotPassword\",\n                    data: {\"email\": self.email(), \"appOwner\": appOwner}\n                }).done(function(data){\n                    if (data && data.hasOwnProperty(\"errorCode\")) {\n                        self.showError(true);\n                        self.errorMsg(\"Unable to send email to reset password. Please contact the administrator. \");\n                        console.log(\"Unable to send email to reset password: \" + JSON.stringify(data));\n                    } else {\n                        self.responseMsg(\"Email has been successfully sent to \" + self.email() + \". Please check your inbox to reset the password\");\n                        self.responseDialog.show(function(){});\n                    }\n                }).fail(function(jqXHR, textStatus) {\n                    console.log(\"forgot password failed:\" +JSON.stringify(jqXHR));\n                });\n            }\n            \n            this.logout = function(){\n                $.ajax({\n                    type: \"POST\",\n                    url: \"/auth/logout\"\n                }).done(function(data){\n                    $cjs.setCJSTokenHash(\"guest\");\n                    self.showSignin();\n                }).fail(function(jqXHR, textStatus) {\n                    console.log(\"logout failed:\" +JSON.stringify(jqXHR));\n                });\n            }\n        }",
      "type" : "STRING"
    }
  }, {
    "name" : "_javascriptResource_fileName",
    "expr" : {
      "str" : "test.js",
      "strEditMode" : "",
      "type" : "STRING"
    }
  }, {
    "name" : "javascriptResource",
    "expr" : {
      "concept" : "/common/core/nK_9eZMUDp8T6qqr7t5k67/",
      "bindings" : {
        "js" : "_javascriptResource_js",
        "fileName" : "_javascriptResource_fileName"
      },
      "type" : "CONCEPT"
    }
  } ],
  "isas" : [ {
    "var" : "javascriptResource"
  } ],
  "encodedidxhash" : "",
  "isLambda" : false
}